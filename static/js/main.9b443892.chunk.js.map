{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ffmpeg","createFFmpeg","getFileType","fileType","split","App","useState","ready","setReady","showError","setShowError","video","setVideo","gif","setGif","load","a","handleVideoUpload","e","target","files","item","validateFile","file","type","convertToGif","rootName","name","fetchFile","FS","run","data","url","URL","createObjectURL","Blob","buffer","useEffect","AppBar","position","Toolbar","Typography","variant","className","height","params","particles","number","value","density","enable","size","random","anim","speed","size_min","line_linked","move","direction","out_mode","interactivity","events","onhover","mode","onclick","modes","bubble","distance","duration","opacity","repulse","style","right","bottom","left","top","zIndex","margin","padding","width","backgroundColor","Card","CardContent","Alert","severity","controls","src","CardActions","Button","component","color","hidden","onChange","onClick","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b443892.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport { AppBar, Button, Toolbar, Typography } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Particles from 'react-particles-js';\nconst ffmpeg = createFFmpeg();\n\nconst getFileType = (fileType: string): string => fileType.split('/')[1];\n\nconst App: React.FC = () => {\n  const [ready, setReady] = useState<boolean>(false);\n  const [showError, setShowError] = useState<boolean>(false);\n  const [video, setVideo] = useState<File | null>();\n  const [gif, setGif] = useState<string>();\n\n  const load = async () => {\n    await ffmpeg.load();\n    setReady(true);\n  };\n\n  const handleVideoUpload = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    e.target.files?.item(0) && validateFile(e.target.files.item(0));\n  };\n\n  const validateFile = (file: File | null) => {\n    if (file) {\n      if (\n        getFileType(file.type) === 'mp4' ||\n        getFileType(file.type) === 'ogg' ||\n        getFileType(file.type) === 'WebM'\n      ) {\n        if (showError) {\n          setShowError(false);\n        }\n        setVideo(file);\n      } else {\n        if (!showError) {\n          setShowError(true);\n        }\n        if (video) {\n          setVideo(null);\n        }\n      }\n    }\n  };\n\n  const convertToGif = async (): Promise<void> => {\n    if (video) {\n      const type = getFileType(video.type);\n      const rootName = `${video.name.split(`.${type}`)}`;\n\n      await ffmpeg.FS('writeFile', `${video.name}`, await fetchFile(video));\n      await ffmpeg.run(\n        '-i',\n        `${video.name}`,\n        '-t',\n        '2.5',\n        '-ss',\n        '2.0',\n        '-f',\n        'gif',\n        `${rootName}.gif`\n      );\n\n      const data = ffmpeg.FS('readFile', `${rootName}.gif`);\n      const url = URL.createObjectURL(\n        new Blob([data.buffer], { type: 'image/gif' })\n      );\n      setGif(url);\n    }\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <b>GIF</b>Builder.me\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className=\"app\">\n        <Particles\n          className=\"particle\"\n          height=\"100%\"\n          params={{\n            particles: {\n              number: {\n                value: 30,\n                density: {\n                  enable: false,\n                },\n              },\n              size: {\n                value: 3,\n                random: true,\n                anim: {\n                  speed: 4,\n                  size_min: 0.3,\n                },\n              },\n              line_linked: {\n                enable: false,\n              },\n              move: {\n                random: true,\n                speed: 1,\n                direction: 'top',\n                out_mode: 'out',\n              },\n            },\n            interactivity: {\n              events: {\n                onhover: {\n                  enable: true,\n                  mode: 'bubble',\n                },\n                onclick: {\n                  enable: true,\n                  mode: 'repulse',\n                },\n              },\n              modes: {\n                bubble: {\n                  distance: 250,\n                  duration: 2,\n                  size: 0,\n                  opacity: 0,\n                },\n                repulse: {\n                  distance: 400,\n                  duration: 4,\n                },\n              },\n            },\n          }}\n          style={{\n            position: 'fixed',\n            right: 0,\n            bottom: 0,\n            left: 0,\n            top: 0,\n            zIndex: -100,\n            height: '100vh',\n            margin: 0,\n            padding: 0,\n            width: '100%',\n            backgroundColor: '#212121',\n          }}\n        ></Particles>\n        {ready ? (\n          <Card className=\"content\">\n            <CardContent>\n              {ready && (\n                <>\n                  {' '}\n                  {showError && (\n                    <Alert severity=\"error\" className=\"error-message\">\n                      Upload failed ðŸ¤¦. Please upload a valid{' '}\n                      <strong>mp4</strong>, <strong>ogg</strong> or\n                      <strong> WebM</strong> file.\n                    </Alert>\n                  )}\n                  <h1 className=\"heading\">ðŸ”¨ Lets build a GIF ðŸ”¨</h1>\n                  {!gif && (\n                    <>\n                      <h4 className=\"sub-heading\">\n                        Please upload a valid <strong>.mp4</strong>,{' '}\n                        <strong>.ogg</strong> or\n                        <strong> .WebM</strong> file to convert it to a GIF.\n                      </h4>\n\n                      {video && (\n                        <div className=\"video-container\">\n                          <h5 className=\"video-preview-label\">\n                            Video Preview:\n                          </h5>\n                          <video\n                            className=\"video-preview\"\n                            controls\n                            src={URL.createObjectURL(video)}\n                          ></video>\n                        </div>\n                      )}\n\n                      <form className=\"conversion-form\">\n                        {!video && (\n                          <CardActions>\n                            <Button\n                              variant=\"contained\"\n                              component=\"label\"\n                              color=\"primary\"\n                            >\n                              Upload File\n                              <input\n                                type=\"file\"\n                                hidden\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>\n                                ) => handleVideoUpload(e)}\n                              />\n                            </Button>\n                          </CardActions>\n                        )}\n\n                        {video && (\n                          <CardActions className=\"button-row\">\n                            <Button\n                              className=\"app-button\"\n                              variant=\"contained\"\n                              onClick={convertToGif}\n                              color=\"primary\"\n                            >\n                              Convert To GIF\n                            </Button>\n                            <Button\n                              variant=\"contained\"\n                              component=\"label\"\n                              className=\"app-button\"\n                            >\n                              Change File\n                              <input\n                                type=\"file\"\n                                hidden\n                                onChange={(\n                                  e: React.ChangeEvent<HTMLInputElement>\n                                ) => handleVideoUpload(e)}\n                              />\n                            </Button>\n                          </CardActions>\n                        )}\n                      </form>\n                    </>\n                  )}\n                  {gif && (\n                    <div className=\"converted-gif-container\">\n                      <h3 className=\"success-text\">\n                        ðŸŒŸ Done. Here's your GIF!ðŸŒŸ\n                      </h3>\n                      <img\n                        src={gif}\n                        alt=\"converted gif\"\n                        className=\"converted-gif\"\n                      />\n                    </div>\n                  )}{' '}\n                </>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"content-loader\">\n            <CardContent>\n              <div className=\"loader-container\">\n                <h1 className=\"heading\">Loading...âŒ›</h1>\n              </div>\n            </CardContent>\n          </Card>\n        )}{' '}\n      </div>{' '}\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}